//*** Abstracts Mixin: Font Create ***//

@use '../variables/__index__' as var;
@use '../functions/__index__' as fn;

@use 'sass:map';
@use 'sass:math';

/**
* Font Setup Mixin
* --------------
* A simplified mixin for setting up font styles using the font system.
* This mixin extends predefined font classes and sets CSS custom properties
* for font characteristics. It provides a clean interface for applying
* consistent typography across components.
* 
* Parameters:
* @param {String} $font           - Font role from the system ('primary', 'sans', etc.)
* @param {Length} $font-size      - Font size value (default: 1em)
* @param {Length} $line-height    - Line height value (default: 1em)
* @param {Number} $font-weight    - Font weight value (default: 400)
* @param {String} $font-style     - Font style value (default: normal)
* @param {String} $letter-spacing - Letter spacing value (default: normal)
* @param {String} $text-transform - Text transform value (default: none)
* 
* Features:
* - Sets CSS custom properties for runtime flexibility
* - Extends base font classes (.$font-text)
* - Extends common text properties (.text-properties)
* - Accepts @content for additional style declarations
* 
* Usage:
* .element {
*   @include f-setup-x('primary', 2em, 1.5em);
* }
* 
* Note: Requires predefined classes:
* - .[font]-text classes for font-family definitions
* - .text-properties for common text rendering properties
*/
@mixin f-setup (
  $font: 'primary',
  $font-size: 1,
  $line-height: 1em,
  $font-weight: 400,
  $font-style: normal,
  $letter-spacing: normal,
  $text-transform: none,
) {
  
  // CSS
  --font-size: #{$font-size};
  --line-height: #{fn.strip-unit($line-height)};
  --font-weight: #{$font-weight};
  --font-style: #{$font-style};
  --letter-spacing: #{$letter-spacing};
  --text-transform: #{$text-transform};


  // Apply the appropriate font based on the parameter
  @extend %text-properties;
  @if $font == 'primary' {
    @extend %primary-text;
  } @else if $font == 'secondary' {
    @extend %secondary-text;
  } @else if $font == 'tertiary' {
    @extend %tertiary-text;
  } @else if $font == 'quote' {
    @extend %quote-text;
  } @else if $font == 'mono' {
    @extend %mono-text;
  }

  // @extend #{$font}-text; // Applies font-family and trimming
  // @extend text-properties; // Applies custom properties
  @content;
}

/**
 * Font Style Creation Mixin
 * -----------------------
 * Creates a complete typographic style block with precise metrics adjustments
 * to ensure perfect vertical rhythm and alignment. This mixin handles both
 * the technical setup of font properties and the complex calculations needed
 * for precise vertical spacing.
 * 
 * Parameters:
 * @param {String} $font           - Font role from font-data map ('primary', 'sans', etc.)
 * @param {String} $text-height    - Reference height for calculations ('cap' or letter 'd')
 * @param {Length} $font-size      - Font size value (default: 1em)
 * @param {Number} $line-height    - Line height multiplier (default: 1)
 * @param {Number} $font-weight    - Font weight value (default: 400)
 * @param {String} $font-style     - Font style value (default: normal)
 * @param {String} $letter-spacing - Letter spacing value (default: normal)
 * @param {String} $text-transform - Text transform value (default: none)
 * @param {Boolean} $lsb-adjust    - Whether to adjust for left side bearing (default: true)
 * 
 * Technical Details:
 * - Uses CSS custom properties for runtime flexibility
 * - Calculates precise margin adjustments using font metrics
 * - Employs pseudo-elements to remove extra space above/below text
 * - Handles alignment based on specified text height metric (cap height, x-height)
 * - Optionally adjusts for left side bearing to improve horizontal alignment
 * 
 * Calculations:
 * - $emBoxExceed: How much the font's ascender+descender exceeds 1em
 * - $ascenderDiff: Difference between ascender and text height reference
 * - $descenderDiff: Descender adjustment needed for balanced spacing
 * - Pseudo-elements apply calculated margins to perfectly trim whitespace
 * - Support for logical properties (margin-inline-start) and modern CSS units (1lh)
 * 
 * Usage:
 * .element {
 *   @include f-create('primary', 'cap', 2rem, 1.5);
 * }
 * 
 * Note: The mixin accepts @content for additional style declarations
 * and automatically handles the creation of trimming pseudo-elements.
 */
@mixin f-create (
  $font: 'primary',
  $text-height: 'cap',
  $font-size: 1em,
  $line-height: 1,
  $font-weight: 400,
  $font-style: normal,
  $letter-spacing: normal,
  $text-transform: none,
  $lsb-adjust: true
) {
  // SCSS variables
  $fontData: map.get(var.$font-data, $font);
  $fontFamily: map.get($fontData, 'font-family');
  $textHeight: map.get($fontData, $text-height);
  $ascender: map.get($fontData, 'ascender');
  $descender: map.get($fontData, 'descender');
  $emBoxExceed: math.div($ascender + $descender - 1, 2);
  $ascenderDiff: $ascender - $emBoxExceed - $textHeight;
  $descenderDiff: $descender - $emBoxExceed;
  $leftSideBearing: map.get($fontData, 'lsb');
  
  // CSS
  & {
    --font-size: #{$font-size};
    --line-height: #{fn.addUnit($line-height, "em")};
    --font-weight: #{$font-weight};
    @if $font-style != normal {
      --font-style: #{$font-style};
    }
    @if $letter-spacing != normal {
      --letter-spacing: #{$letter-spacing};
    }
    @if $text-transform != none {
      --text-transform: #{$text-transform};
    }    
    @if $lsb-adjust {
      --lsb-adjust: #{$leftSideBearing * -1}em;
    }

    font-family: #{$fontFamily};
    font-size: var(--font-size);
    line-height: var(--line-height);
    font-weight: var(--font-weight);
    @if $font-style != normal {
      font-style: var(--font-style);
    }
    @if $letter-spacing != normal {
      letter-spacing: var(--letter-spacing);
    }
    @if $text-transform != none {
      text-transform: var(--text-transform);
    }
    @if $lsb-adjust {
      margin-inline-start: var(--lsb-adjust);
    }
  }

  @content;

  &::before, &::after {
    content: '';
    display: table;
  }

  &::before {
    margin-bottom: calc(((1 - var(--line-height)) * 0.5 - #{$ascenderDiff}) * 1em);
    @supports (margin-bottom: 1lh) {
      margin-bottom: calc(((1lh - 1em) * -0.5) - #{$ascenderDiff}em);
    }
  }

  &::after {
    margin-bottom: calc(((1 - var(--line-height)) * 0.5 - #{$descenderDiff}) * 1em);
    @supports (margin-bottom: 1lh) {
      margin-bottom: calc(((1lh - 1em) * -0.5) - #{$descenderDiff}em);
    }
  }
}
