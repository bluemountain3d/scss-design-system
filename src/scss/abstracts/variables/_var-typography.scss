//*** Abstracts Variables: Typography ***//

@use 'sass:map';
@use 'sass:math';

// Base font size
$base-font-size: 100%;

// Size steps from 100 to 900 where 300 is base
$font-sizes: (
  100: -2,
  200: -1,
  300: 0,
  400: 1,
  500: 2,
  600: 3,
  700: 4,
  800: 5,
  900: 6
);

/**
 * Font System Configuration
 * -----------------------
 * Defines the standardized font names used throughout the application's style system.
 * These are internal reference names that map to actual font-family declarations
 * in the font-face implementations.
 * 
 * Base Font Path:
 * - $font-path: Base directory path for all font files, relative to the stylesheet location.
 *   Since stylesheets are located in the src/css/ directory, this path points to
 *   the fonts folder at the same level as the css folder.
 *   Font files are expected to be organized in subdirectories named after each font.
 *   Example: For Cinzel, files would be in `../fonts/cinzel/cinzel-regular.woff2`
 * 
 * Hierarchical Categories:
 * - $primary-font:    Used for primary headings and key visual elements
 * - $secondary-font:  Used for subheadings and supporting text
 * - $tertiary-font:   Used for body text and longer form content
 * 
 * Functional Categories:
 * - $display-font:    Large-scale typographic elements and hero text
 * - $serif-font:      Traditional serif typeface for long-form reading
 * - $sans-font:       Clean sans-serif for UI elements and short text
 * - $mono-font:       Monospace font for code and technical content
 * - $quote-font:      Stylized font for pullquotes and testimonials
 * 
 * File Naming Convention:
 * Font files should follow the pattern: `[font-name]-[weight-name].woff2`
 * 
 * Weight names follow standard conventions:
 * - For normal style:
 *   - regular (400)
 *   - bold (700)
 *   - thin (100)
 *   - extralight (200)
 *   - light (300)
 *   - medium (500)
 *   - semibold (600)
 *   - extrabold (800)
 *   - black (900)
 * 
 * - For italic style:
 *   - italic (400 italic)
 *   - bolditalic (700 italic)
 *   - thinitalic (100 italic)
 *   - lightitalic (300 italic)
 *   - etc.
 * 
 * Examples:
 * - cinzel-regular.woff2
 * - montserrat-bold.woff2
 * - spectral-italic.woff2
 * 
 * Custom weight names can be defined in the $font-family-data map for fonts 
 * with non-standard weight naming conventions.
 * 
 * Note: These are internal reference names that are processed through the
 * font system to generate complete @font-face declarations with proper
 * file paths and size-adjust calculations.
 */
$font-path: '../fonts/';
$font-weights-map: (
  100: 'thin',       // "thinitalic" if font-style is "italic"
  200: 'extralight', // "extralightitalic" if font-style is "italic"
  300: 'light',      // "lightitalic" if font-style is "italic"
  400: 'regular',    // "italic" if font-style is "italic"
  500: 'medium',     // "mediumitalic" if font-style is "italic"
  600: 'semibold',   // "semibolditalic" if font-style is "italic"
  700: 'bold',       // "bolditalic" if font-style is "italic"
  800: 'extrabold',  // "extrabolditalic" if font-style is "italic"
  900: 'black'       // "blackitalic" if font-style is "italic"
);

$primary-font: 'cinzel';
$secondary-font: 'montserrat';
$tertiary-font: 'spectral';

$display-font: 'cinzel';
$serif-font: 'spectral';
$sans-font: 'montserrat';
$quote-font: 'spectral';
$mono-font: 'anonymous';

/**
 * Font Metrics Configuration Map
 * ----------------------------
 * Defines the core metrics for each typeface in the system. These values are used
 * to calculate precise typography and maintain consistent vertical rhythm.
 * All measurements are expressed as ratios relative to the font's em-square (1000 units).
 * 
 * Metrics Properties:
 * - font-family:  The actual CSS font-family name
 * - cap-height:   Height of capital letters from baseline
 * - x-height:     Height of lowercase 'x' from baseline
 * - d-height:     Total height of lowercase characters with ascenders
 * - ch-width:     Average character width (used for sizing calculations)
 * - lsb-adjust:  Avarage empty space (in em) on the left side of upper case characters A-Z
 * - ascender:     Maximum upward extension of the font from baseline
 * - descender:    Maximum downward extension of the font from baseline
 * - weight-names: Optional map for font family custom weight names 
 */
 $font-family-data: (
  'cinzel': (
    'font-family'   : '"Cinzel"',
    'cap-height'    : 0.700, // sCapHeight normalized value to unitsPerEm
    'd-height'      : 0.600, // yMax of lowercase letter "d" normalized value to unitsPerEm
    'ch-width'      : 0.659, // xAvgCharWidth normalized value to unitsPerEm
    'lsb-adjust'    : 0.060,
    'ascender'      : 0.802, // baseline to top of em-box, normalized: (hhea: ascender - (ascender + descender - unitsPerEm) / 2)
    'descender'     : 0.198, // baseline to bottom of em-box, normalized: (hhea: descender - (ascender + descender - unitsPerEm) / 2)
    'weight-names'  : (), 
  ),

  'montserrat': (
    'font-family'   : '"Montserrat"',
    'cap-height'    : 0.700,
    'd-height'      : 0.742,
    'ch-width'      : 0.638,
    'lsb-adjust'    : 0.114,
    'ascender'      : 0.859,
    'descender'     : 0.141,
    'weight-names'  : (), 
  ),

  'spectral': (
    'font-family'   : '"Spectral"',
    'cap-height'    : 0.660,
    'x-height'      : 0.450,
    'd-height'      : 0.750,
    'ch-width'      : 0.592,
    'lsb-adjust'    : 0.065,
    'ascender'      : 0.798,
    'descender'     : 0.202,
    'weight-names'  : (),
  ),

  'anonymous': (
    'font-family'   : '"Anonymous Pro"',
    'cap-height'    : 0.637,
    'x-height'      : 0.455,
    'd-height'      : 0.637,
    'ch-width'      : 0.546,
    'lsb-adjust'    : 0.0104,
    'ascender'      : 0.817,
    'descender'     : 0.183,
    'weight-names'  : (),
  )
);

// Help function
@function getFontMetric($font-name, $property) {
  @return map.get(map.get($font-family-data, $font-name), $property);
}

/**
* Extended Font Data Map
* --------------------
* Maps semantic font roles to their corresponding metrics and properties.
* This map combines the font naming system with their detailed metrics,
* creating an abstraction layer for consistent typographic application.
* 
* The map is organized into two main categories:
* 1. Hierarchy-based roles (primary, secondary, tertiary)
* 2. Function-based roles (display, serif, sans, mono, quote)
* 
* Properties for each font:
* - font-family:   The actual CSS font-family declaration
* - font-name:     Reference to the internal font identifier
* - cap:           Capital letter height ratio (abbreviated from cap-height)
* - cap-ratio:     ???
* - d:             Lowercase ascender height ratio (abbreviated from d-height)
* - ch:            Avarage character width ratio
* - ascender:      Maximum upward font extension from baseline
* - descender:     Maximum downward font extension from baseline
* 
* Usage Example:
* $display-cap-height: map.get($font-data, 'display', 'cap');
* 
* Note: All values are dynamically mapped from the base $font-data map,
* ensuring consistency across the type system. Property names are
* abbreviated for convenience in complex calculations.
*/
$font-data: (
  // Hierarchical
  'primary': (
    'font-family'   : getFontMetric($primary-font, 'font-family'),
    'font-name'     : $primary-font,
    'cap'           : getFontMetric($primary-font, 'cap-height'),
    'd'             : getFontMetric($primary-font, 'd-height'),
    'lsb'           : getFontMetric($primary-font, 'lsb-adjust'),
    'ch'            : getFontMetric($primary-font, 'ch-width'),
    'ascender'      : getFontMetric($primary-font, 'ascender'),
    'descender'     : getFontMetric($primary-font, 'descender'),
    'weight-names'  : getFontMetric($primary-font, 'weight-names'),
  ),

  'secondary': (
    'font-family'   : getFontMetric($secondary-font, 'font-family'),
    'font-name'     : $secondary-font,
    'cap'           : getFontMetric($secondary-font, 'cap-height'),
    'd'             : getFontMetric($secondary-font, 'd-height'),
    'lsb'           : getFontMetric($secondary-font, 'lsb-adjust'),
    'ch'            : getFontMetric($secondary-font, 'ch-width'),
    'ascender'      : getFontMetric($secondary-font, 'ascender'),
    'descender'     : getFontMetric($secondary-font, 'descender'),
    'weight-names'  : getFontMetric($secondary-font, 'weight-names'),
  ),

  'tertiary': (
    'font-family'   : getFontMetric($tertiary-font, 'font-family'),
    'font-name'     : $tertiary-font,
    'cap'           : getFontMetric($tertiary-font, 'cap-height'),
    'd'             : getFontMetric($tertiary-font, 'd-height'),
    'lsb'           : getFontMetric($tertiary-font, 'lsb-adjust'),
    'ch'            : getFontMetric($tertiary-font, 'ch-width'),
    'ascender'      : getFontMetric($tertiary-font, 'ascender'),
    'descender'     : getFontMetric($tertiary-font, 'descender'),
    'weight-names'  : getFontMetric($tertiary-font, 'weight-names'),
  ),

  // Functinal
  'display': (
    'font-family'   : getFontMetric($display-font, 'font-family'),
    'font-name'     : $display-font,
    'cap'           : getFontMetric($display-font, 'cap-height'),
    'd'             : getFontMetric($display-font, 'd-height'),
    'lsb'           : getFontMetric($display-font, 'lsb-adjust'),
    'ch'            : getFontMetric($display-font, 'ch-width'),
    'ascender'      : getFontMetric($display-font, 'ascender'),
    'descender'     : getFontMetric($display-font, 'descender'),
    'weight-names'  : getFontMetric($display-font, 'weight-names'),
  ),

  'serif': (
    'font-family'   : getFontMetric($serif-font, 'font-family'),
    'font-name'     : $serif-font,
    'cap'           : getFontMetric($serif-font, 'cap-height'),
    'd'             : getFontMetric($serif-font, 'd-height'),
    'lsb'           : getFontMetric($serif-font, 'lsb-adjust'),
    'ch'            : getFontMetric($serif-font, 'ch-width'),
    'ascender'      : getFontMetric($serif-font, 'ascender'),
    'descender'     : getFontMetric($serif-font, 'descender'),
    'weight-names'  : getFontMetric($serif-font, 'weight-names'),
  ),

  'sans': (
    'font-family'   : getFontMetric($sans-font, 'font-family'),
    'font-name'     : $sans-font,
    'cap'           : getFontMetric($sans-font, 'cap-height'),
    'd'             : getFontMetric($sans-font, 'd-height'),
    'lsb'           : getFontMetric($sans-font, 'lsb-adjust'),
    'ch'            : getFontMetric($sans-font, 'ch-width'),
    'ascender'      : getFontMetric($sans-font, 'ascender'),
    'descender'     : getFontMetric($sans-font, 'descender'),
    'weight-names'  : getFontMetric($sans-font, 'weight-names'),
  ),

  'quote': (
    'font-family'   : getFontMetric($quote-font, 'font-family'),
    'font-name'     : $quote-font,
    'cap'           : getFontMetric($quote-font, 'cap-height'),
    'd'             : getFontMetric($quote-font, 'd-height'),
    'lsb'           : getFontMetric($quote-font, 'lsb-adjust'),
    'ch'            : getFontMetric($quote-font, 'ch-width'),
    'ascender'      : getFontMetric($quote-font, 'ascender'),
    'descender'     : getFontMetric($quote-font, 'descender'),
    'weight-names'  : getFontMetric($quote-font, 'weight-names'),
  ),

  'mono': (
    'font-family'   : getFontMetric($mono-font, 'font-family'),
    'font-name'     : $mono-font,
    'cap'           : getFontMetric($mono-font, 'cap-height'),
    'd'             : getFontMetric($mono-font, 'd-height'),
    'lsb'           : getFontMetric($mono-font, 'lsb-adjust'),
    'ch'            : getFontMetric($mono-font, 'ch-width'),
    'ascender'      : getFontMetric($mono-font, 'ascender'),
    'descender'     : getFontMetric($mono-font, 'descender'),
    'weight-names'  : getFontMetric($mono-font, 'weight-names'),
  )
);

// Help Function
@function getFontData($font-name, $property) {
  @return map.get(map.get($font-data, $font-name), $property);
}

/**
 * Font Family Variables
 * -------------------
 * Global variables that extract and quote the font-family values
 * from the font data system for direct use in CSS declarations.
 * 
 * These variables provide a simplified interface to the font system,
 * abstracting away the complexity of the underlying data maps.
 * The quote() function ensures proper CSS string formatting.
 * 
 * Hierarchical Fonts:
 * - $primary-font-family:   Main typeface for headings
 * - $secondary-font-family: Supporting typeface for subheadings
 * - $tertiary-font-family:  Body text typeface
 * 
 * Functional Fonts:
 * - $display-font-family:   Large-scale display text
 * - $serif-font-family:     Traditional serif text
 * - $sans-font-family:      Clean sans-serif text
 * - $mono-font-family:      Monospace for code
 * - $quote-font-family:     Stylized quote text
 * 
 * Usage:
 * .element {
 *   font-family: $primary-font-family;
 * }
*/
$primary-font-family: getFontData('primary', 'font-family');
$secondary-font-family: getFontData('secondary', 'font-family');
$tertiary-font-family: getFontData('tertiary', 'font-family');

$display-font-family: getFontData('display', 'font-family');
$serif-font-family: getFontData('serif', 'font-family');
$sans-font-family: getFontData('sans', 'font-family');
$quote-font-family: getFontData('quote', 'font-family');
$mono-font-family: getFontData('mono', 'font-family');

$primary-desc: getFontData('primary', 'descender');
$secondary-desc: getFontData('secondary', 'descender');
$tertiary-desc: getFontData('tertiary', 'descender');
$quote-desc: getFontData('quote', 'descender');
$mono-desc: getFontData('mono', 'descender');